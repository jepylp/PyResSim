'''
Author:       James Porter

Helper object to read the configuration files and the
files that are generated by flow
'''

import csv
import os
import sys
from pathlib import Path
from ecl.summary import EclSum
import numpy as np
import calculator
from individual import Individual
from flowrate import Flowrate

class Reader:
    '''
    Read in configurations files and files generated by flow
    '''

    def rock_types(self, path: Path = Path('./templates/rock_types.csv')):
        '''
        Load the rock types, should be able to handle any number of rocks
        '''

        rocks = []  # initialize the array

        # Open the file, append the rocks.
        with open(path) as csv_data_file:
            csv_reader = csv.reader(csv_data_file)
            for row in csv_reader:
                rocks.append(row)

        # remove header line
        rocks.pop(0)

        return rocks

    def load_cases_from_template(self,
        generation: int,
        cases_path: Path = Path('./templates/standard_cases/')
    ):
        '''
        Load pre-made cases. Useful for loading standard cases and testing cases
        '''

        population = []
        case = 0

        for file in os.listdir(cases_path):

            with open(os.path.join(cases_path, file), 'r') as csv_data_file:
                csv_reader = csv.reader(csv_data_file)
                genes = [] # initialize genes

                # For each cell in the csv file create a gene
                for row in csv_reader:
                    for cell in row:
                        genes.append(int(cell))

                # create Individual, assign case and generation
                population.append(Individual(
                    genes= genes,
                    case= case,
                    generation= generation,
                    parents= 'none'
                ))

                # Increment case
                case = case + 1

        return population

    def load_history(self,
        time_steps,
        path: Path = Path('./tests/history/HISTORY.csv')
    ):
        '''
        Read csv histroy file. file should only contain the average flow rate
        for the end of the month
        returns pairings of time_step and flowrate
        '''

        # Initialize the array to be returned with all the flow rates
        history = []

        # Open csv and read it into the history array
        with open(path) as csv_data_file:

            time_step_position = 0  # position for the time_step array for
                                    # matching with historical flowrate

            csv_reader = csv.reader(csv_data_file)
            for row in csv_reader:
                for entry in row:

                    # convert the value to a float and append to array
                    try:
                        history.append(
                            Flowrate(time_steps[time_step_position],
                            entry)
                        )
                    except TypeError:
                        print(
                            "Could not convert '{}' to "
                            "a float...skipping.".format(entry)
                        )
                        print ("Stopping, please check history file")
                        sys.exit()

                    time_step_position = time_step_position + 1

        history = np.array(history)

        return history

    def load_time_steps(self, time_file_path: Path):
        '''
        Load time steps from file
        return the percentage of the year for each time step,
        and the total number of days for that year
        '''

        time_steps = [] # all time steps to return
        year = 0        # Initialize the year

        time_file = open(time_file_path) # open the time file

        # Scan each row in time file
        for row in time_file:

            # Split the row based on spaces
            cells = row.split(' ')
            running_total_days = []
            total_days_for_year = 0         # total number of days for the year

            for cell in cells:
                if cell.isdigit(): # for end section input symbol for eclipse file
                    try:
                        total_days_for_year = total_days_for_year + int(cell)
                        running_total_days.append(int(total_days_for_year))
                    except TypeError:
                        print('Not int, skipping')

            # Calculate the running total of the days and divide that by
            # the total days for the year as entered in the time file
            # then append the days percentage to the time steps
            for days in running_total_days:
                time_steps.append(
                    calculator.convert_days_to_flowtime(
                        days, total_days_for_year, year)
                )

            year = year + 1

        time_file.close()

        return time_steps

    def load_case_from_flow(self, case_path: Path, time_steps):
        '''
        Read cases based on the path provided
        Path does not work with EclSum, so converting to string
        '''

        summary = EclSum(str(case_path))
        #print(summary.keys())      # print the keys that can be used
        fopr = summary.numpy_vector("FOPR")
        time = summary.numpy_vector("YEARS")

        return_flowrates = []

        

        # Find a match for each step in the time step
        for step in time_steps:

            idx = self.find_nearest(step, time)

            return_flowrates.append(Flowrate(time[idx], fopr[idx]))

        # Convert array to numpy_vector

        return_flowrates = np.array(return_flowrates)

        return return_flowrates

    ## helper functions ##

    def find_nearest(self, value, array) -> int:
        '''
        might not be the best wya as this will fail to return the
        corrent result due to drift
        return the index position of closest value in array to a value
        '''
        idx = (np.abs(array - value)).argmin()
        return idx

def main():

    pass

if __name__ == '__main__':
    main()
